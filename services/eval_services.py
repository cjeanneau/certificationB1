from typing import Optional
from bddpg import get_session_sync, BienImmobilier, TransactionDVF, DPE
from sqlmodel import select, desc

class EvalServices:
   
    
    @staticmethod
    def eval_multifields_cp_bak(
        cp: str,
        type_bien: Optional[str] = None,
        surface_min: Optional[float] = None,
        surface_max: Optional[float] = None,
        etiquette_dpe: Optional[int] = None
    ) -> float:
        """
        Evaluation immobiliÃ¨re (prix au m2) avancÃ©e par code postal.
        
        Args:
            cp (str) : Code postal Ã  Ã©valuer.
            type_bien (Optional[str]) : Type de bien immobilier.
            surface_min (Optional[float]) : Surface minimale du bien.
            surface_max (Optional[float]) : Surface maximale du bien.
            etiquette_dpe (Optional[int]) : Etiquette DPE du bien.

        Returns:
            float: RÃ©sultat de l'Ã©valuation immobiliÃ¨re.
        """
        #  Cette mÃ©thode interroge la BDD postGreSQL pour obtenir les donnÃ©es nÃ©cessaires Ã  l'Ã©valuation.
        
        # On vÃ©rifie la prÃ©snce d'un code postal valide
        if not cp or len(cp) != 5 or not cp.isdigit():
            raise ValueError("Le code postal doit Ãªtre une chaÃ®ne de 5 chiffres.")
        
        # si seulement cp prÃ©sent alors on interroge la BDD pour rÃ©cupÃ©rer les donnÃ©es
        # et on calcule le prix au m2 moyen pour le code postal donnÃ©.
        # Si d'autres champs sont prÃ©sents, on les utilise pour affiner la recherche.

        
        try:
            with get_session_sync() as session:
                
                # ðŸŽ¯ Construction de la requÃªte avec TOUS les filtres d'un coup
                query = select(
                    BienImmobilier.id_bien,
                    BienImmobilier.code_postal,
                    BienImmobilier.type_bien,
                    DPE.surface_habitable_logement,
                    DPE.etiquette_dpe,
                    TransactionDVF.valeur_fonciere,
                    TransactionDVF.date_mutation
                ).select_from(
                    BienImmobilier
                    .join(DPE, BienImmobilier.id_bien == DPE.id_bien)
                    .join(TransactionDVF, BienImmobilier.id_bien == TransactionDVF.id_bien)
                ).where(
                    # âœ… Filtre obligatoire : Code postal
                    BienImmobilier.code_postal == cp,
                    # âœ… Filtre obligatoire : Surface valide (> 0)
                    DPE.surface_habitable_logement > 0,
                    # âœ… Filtre obligatoire : Valeur fonciÃ¨re valide
                    TransactionDVF.valeur_fonciere > 0
                )
                
                # âœ… Ajouter les filtres optionnels selon leur prÃ©sence
                if type_bien:
                    query = query.where(BienImmobilier.type_bien == type_bien)
                
                if surface_min is not None:
                    query = query.where(DPE.surface_habitable_logement >= surface_min)
                
                if surface_max is not None:
                    query = query.where(DPE.surface_habitable_logement <= surface_max)
                
                if etiquette_dpe is not None:
                    query = query.where(DPE.etiquette_dpe == etiquette_dpe)
                
                # âœ… Ordonner par date pour rÃ©cupÃ©rer les derniÃ¨res transactions
                query = query.order_by(desc(TransactionDVF.date_mutation))
                
                # ExÃ©cuter la requÃªte
                results = session.exec(query).all()
                
                if not results:
                    raise ValueError(f"Aucun bien trouvÃ© pour les critÃ¨res donnÃ©s dans le CP {cp}")
                
                r# ðŸ’° Calculer directement les prix au mÂ²
                prix_m2_list = [
                    row.valeur_fonciere / row.surface_habitable_logement 
                    for row in results
                ]
                
                prix_m2_moyen = sum(prix_m2_list) / len(prix_m2_list)
                
                print(f"âœ… Ã‰valuation optimisÃ©e {cp}: {len(prix_m2_list)} biens")
                print(f"ðŸ“Š Prix au mÂ² moyen : {prix_m2_moyen:.2f}â‚¬")
                
                return round(prix_m2_moyen, 2)
                
        except Exception as e:
            raise ValueError("Erreur lors de l'Ã©valuation immobiliÃ¨re : {str(e)}")        



    @staticmethod
    def eval_multifields_cp(
        cp: str,
        type_bien: Optional[str] = None,
        surface_min: Optional[float] = None,
        surface_max: Optional[float] = None,
        etiquette_dpe: Optional[int] = None
    ) -> float:
        """Version avec SQL brut pour performance maximale"""
        
        if not cp or len(cp) != 5 or not cp.isdigit():
            raise ValueError("Le code postal doit Ãªtre une chaÃ®ne de 5 chiffres.")
        
        try:
            with get_session_sync() as session:
                
                # ðŸŽ¯ Construction dynamique de la requÃªte SQL
                base_sql = """
                SELECT 
                    AVG(dt.valeur_fonciere / d.surface_habitable_logement) as prix_m2_moyen,
                    COUNT(*) as nb_biens
                FROM bien_immobilier bi
                JOIN dpe d ON bi.id_bien = d.id_bien
                JOIN (
                    SELECT DISTINCT ON (id_bien) 
                        id_bien, 
                        valeur_fonciere, 
                        date_mutation
                    FROM transaction_dvf
                    WHERE valeur_fonciere > 0
                    ORDER BY id_bien, date_mutation DESC
                ) dt ON bi.id_bien = dt.id_bien
                WHERE bi.code_postal = :cp
                AND d.surface_habitable_logement > 0
                """
                
                # âœ… Ajouter les conditions dynamiquement
                conditions = []
                params = {"cp": cp}
                
                if type_bien:
                    conditions.append("AND bi.type_bien = :type_bien")
                    params["type_bien"] = type_bien
                    
                if surface_min is not None:
                    conditions.append("AND d.surface_habitable_logement >= :surface_min")
                    params["surface_min"] = surface_min
                    
                if surface_max is not None:
                    conditions.append("AND d.surface_habitable_logement <= :surface_max")
                    params["surface_max"] = surface_max
                    
                if etiquette_dpe is not None:
                    conditions.append("AND d.etiquette_dpe = :etiquette_dpe")
                    params["etiquette_dpe"] = etiquette_dpe
                
                # Construire la requÃªte finale
                final_sql = base_sql + " ".join(conditions)
                
                # ExÃ©cuter
                result = session.exec(text(final_sql), params).first()
                
                if not result or result.nb_biens == 0:
                    raise ValueError(f"Aucun bien trouvÃ© pour les critÃ¨res dans le CP {cp}")
                
                prix_m2_moyen = float(result.prix_m2_moyen)
                
                print(f"âœ… Ã‰valuation SQL {cp}: {result.nb_biens} biens")
                print(f"ðŸ“Š Prix au mÂ² moyen: {prix_m2_moyen:.2f}â‚¬")
                
                return round(prix_m2_moyen, 2)
                
        except Exception as e:
            raise ValueError(f"Erreur lors de l'Ã©valuation: {str(e)}")

        
        